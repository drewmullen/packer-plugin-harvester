// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package img

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatBuildSource is an auto-generated flat version of BuildSource.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatBuildSource struct {
	Name        *string `mapstructure:"name" cty:"name" hcl:"name"`
	OSType      *string `mapstructure:"os_type" cty:"os_type" hcl:"os_type"`
	ImageType   *string `mapstructure:"image_type" cty:"image_type" hcl:"image_type"`
	URL         *string `mapstructure:"url" required:"false" cty:"url" hcl:"url"`
	DisplayName *string `mapstructure:"display_name" required:"false" cty:"display_name" hcl:"display_name"`
	Checksum    *string `mapstructure:"checksum" required:"false" cty:"checksum" hcl:"checksum"`
	Cleanup     *bool   `mapstructure:"cleanup" required:"false" cty:"cleanup" hcl:"cleanup"`
}

// FlatMapstructure returns a new FlatBuildSource.
// FlatBuildSource is an auto-generated flat version of BuildSource.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*BuildSource) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatBuildSource)
}

// HCL2Spec returns the hcl spec of a BuildSource.
// This spec is used by HCL to read the fields of BuildSource.
// The decoded values from this spec will then be applied to a FlatBuildSource.
func (*FlatBuildSource) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"name":         &hcldec.AttrSpec{Name: "name", Type: cty.String, Required: false},
		"os_type":      &hcldec.AttrSpec{Name: "os_type", Type: cty.String, Required: false},
		"image_type":   &hcldec.AttrSpec{Name: "image_type", Type: cty.String, Required: false},
		"url":          &hcldec.AttrSpec{Name: "url", Type: cty.String, Required: false},
		"display_name": &hcldec.AttrSpec{Name: "display_name", Type: cty.String, Required: false},
		"checksum":     &hcldec.AttrSpec{Name: "checksum", Type: cty.String, Required: false},
		"cleanup":      &hcldec.AttrSpec{Name: "cleanup", Type: cty.Bool, Required: false},
	}
	return s
}

// FlatBuildTarget is an auto-generated flat version of BuildTarget.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatBuildTarget struct {
	Namespace        *string `mapstructure:"namespace" required:"false" cty:"namespace" hcl:"namespace"`
	DisplayName      *string `mapstructure:"display_name" cty:"display_name" hcl:"display_name"`
	StorageClassName *string `mapstructure:"storage_class_name" required:"false" cty:"storage_class_name" hcl:"storage_class_name"`
}

// FlatMapstructure returns a new FlatBuildTarget.
// FlatBuildTarget is an auto-generated flat version of BuildTarget.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*BuildTarget) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatBuildTarget)
}

// HCL2Spec returns the hcl spec of a BuildTarget.
// This spec is used by HCL to read the fields of BuildTarget.
// The decoded values from this spec will then be applied to a FlatBuildTarget.
func (*FlatBuildTarget) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"namespace":          &hcldec.AttrSpec{Name: "namespace", Type: cty.String, Required: false},
		"display_name":       &hcldec.AttrSpec{Name: "display_name", Type: cty.String, Required: false},
		"storage_class_name": &hcldec.AttrSpec{Name: "storage_class_name", Type: cty.String, Required: false},
	}
	return s
}

// FlatConfig is an auto-generated flat version of Config.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatConfig struct {
	PackerBuildName     *string           `mapstructure:"packer_build_name" cty:"packer_build_name" hcl:"packer_build_name"`
	PackerBuilderType   *string           `mapstructure:"packer_builder_type" cty:"packer_builder_type" hcl:"packer_builder_type"`
	PackerCoreVersion   *string           `mapstructure:"packer_core_version" cty:"packer_core_version" hcl:"packer_core_version"`
	PackerDebug         *bool             `mapstructure:"packer_debug" cty:"packer_debug" hcl:"packer_debug"`
	PackerForce         *bool             `mapstructure:"packer_force" cty:"packer_force" hcl:"packer_force"`
	PackerOnError       *string           `mapstructure:"packer_on_error" cty:"packer_on_error" hcl:"packer_on_error"`
	PackerUserVars      map[string]string `mapstructure:"packer_user_variables" cty:"packer_user_variables" hcl:"packer_user_variables"`
	PackerSensitiveVars []string          `mapstructure:"packer_sensitive_variables" cty:"packer_sensitive_variables" hcl:"packer_sensitive_variables"`
	HarvesterURL        *string           `mapstructure:"harvester_url" cty:"harvester_url" hcl:"harvester_url"`
	HarvesterToken      *string           `mapstructure:"harvester_token" cty:"harvester_token" hcl:"harvester_token"`
	HarvesterNamespace  *string           `mapstructure:"harvester_namespace" cty:"harvester_namespace" hcl:"harvester_namespace"`
	BuildSource         *FlatBuildSource  `mapstructure:"build_source" cty:"build_source" hcl:"build_source"`
	BuildTarget         *FlatBuildTarget  `mapstructure:"build_target" cty:"build_target" hcl:"build_target"`
}

// FlatMapstructure returns a new FlatConfig.
// FlatConfig is an auto-generated flat version of Config.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Config) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatConfig)
}

// HCL2Spec returns the hcl spec of a Config.
// This spec is used by HCL to read the fields of Config.
// The decoded values from this spec will then be applied to a FlatConfig.
func (*FlatConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"packer_build_name":          &hcldec.AttrSpec{Name: "packer_build_name", Type: cty.String, Required: false},
		"packer_builder_type":        &hcldec.AttrSpec{Name: "packer_builder_type", Type: cty.String, Required: false},
		"packer_core_version":        &hcldec.AttrSpec{Name: "packer_core_version", Type: cty.String, Required: false},
		"packer_debug":               &hcldec.AttrSpec{Name: "packer_debug", Type: cty.Bool, Required: false},
		"packer_force":               &hcldec.AttrSpec{Name: "packer_force", Type: cty.Bool, Required: false},
		"packer_on_error":            &hcldec.AttrSpec{Name: "packer_on_error", Type: cty.String, Required: false},
		"packer_user_variables":      &hcldec.AttrSpec{Name: "packer_user_variables", Type: cty.Map(cty.String), Required: false},
		"packer_sensitive_variables": &hcldec.AttrSpec{Name: "packer_sensitive_variables", Type: cty.List(cty.String), Required: false},
		"harvester_url":              &hcldec.AttrSpec{Name: "harvester_url", Type: cty.String, Required: false},
		"harvester_token":            &hcldec.AttrSpec{Name: "harvester_token", Type: cty.String, Required: false},
		"harvester_namespace":        &hcldec.AttrSpec{Name: "harvester_namespace", Type: cty.String, Required: false},
		"build_source":               &hcldec.BlockSpec{TypeName: "build_source", Nested: hcldec.ObjectSpec((*FlatBuildSource)(nil).HCL2Spec())},
		"build_target":               &hcldec.BlockSpec{TypeName: "build_target", Nested: hcldec.ObjectSpec((*FlatBuildTarget)(nil).HCL2Spec())},
	}
	return s
}
